{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What's Open API? \u00b6 Open API is part of Spotware cTrader package, it allows cTrader users to develop trading applications by using their programming language of choice and its free for all cTrader users. What's OpenAPI.NET? \u00b6 OpenAPI.NET is a .NET library for interacting with cTrader Open API, it makes Open API usage easier and allows you to focus on your project instead of spending time to figuring out how to compile Google Protobuf message files or how to send/receive API messages. Installation \u00b6 You can install OpenAPI.Net from Nuget on your .NET project, to install it run the following command on Nuget package manager console: Install-Package Spotware.OpenAPI.Net Or search for Spotware.OpenAPI.Net on Visual Studio Nuget package manager UI.","title":"Getting Started"},{"location":"#whats-open-api","text":"Open API is part of Spotware cTrader package, it allows cTrader users to develop trading applications by using their programming language of choice and its free for all cTrader users.","title":"What's Open API?"},{"location":"#whats-openapinet","text":"OpenAPI.NET is a .NET library for interacting with cTrader Open API, it makes Open API usage easier and allows you to focus on your project instead of spending time to figuring out how to compile Google Protobuf message files or how to send/receive API messages.","title":"What's OpenAPI.NET?"},{"location":"#installation","text":"You can install OpenAPI.Net from Nuget on your .NET project, to install it run the following command on Nuget package manager console: Install-Package Spotware.OpenAPI.Net Or search for Spotware.OpenAPI.Net on Visual Studio Nuget package manager UI.","title":"Installation"},{"location":"authentication/","text":"API Application \u00b6 To use Spotware Open API you have to first create an open API application, send an activation request to Spotware for your application, and once it got activated you can start using the API through your application. To create an Open API application go to: openapi.ctrader.com Getting Auth Code \u00b6 After Spotware activated your API application, you can start using it, the first step is to get an authentication code from user, to do that via OpenAPI.NET you can use the code below to get authentication URL: First add these usings: using OpenAPI.Net ; using OpenAPI.Net.Auth ; using OpenAPI.Net.Helpers ; Then: // The classes used in this code snippet are located at OpenAPI.Net.Auth // Your API application ID var appId = \"\" ; // Your API application secret var appSecret = \"\" ; // One of your API applications redirect URI that you want to redirect user var redirectUrl = \"\" ; _app = new App ( appId , appSecret , redirectUrl ); // The scope of authentication token (Trading or Accounts), Trading is default var authUri = _app . GetAuthUri ( scope : Scope . Trading ); // authUri is the authentication URI, open it on browser System . Diagnostics . Process . Start ( \"explorer.exe\" , $\"\\\"{authUri}\\\"\" ); When user opens the authentication URI on browser he has to enter his cTrader ID credentials and then select the trading accounts he want to authorize your API application to use, after that he will be redirected to your provided Redirect URL and the authentication code will be appended to the redirect URL as a parameter: http://api.algodeveloper.com/redirects/?code=20df253b58df60a4e09f10b45e2ec11dbc0ccc565326d5706a8ea As you can see \" http://api.algodeveloper.com/redirects/ \" is my redirect URI and \"20df253b58df60a4e09f10b45e2ec11dbc0ccc565326d5706a8ea\" is the authentication code. To extract the authentication code from redirect URL you can use the AuthCode class. Generating Access Token \u00b6 After you got the user authentication code, you can generate an access token, you have to do it instantly otherwise authentication code will expire after one minute. To generate an access token via OpenAPI.NET use the following code: // The classes used in this code snippet are located at OpenAPI.Net.Auth // Use TokenFactory to get the token var token = await TokenFactory . GetToken ( authCode , app ); Now you have a token object, it has these properties: AccessToken: This is the access token, you will use it on your API calls RefreshToken: This is the token that you will use to refresh your access token after it expired, refresh token never expires ExpiresIn: The expiry time of your access token TokenType: Type of access token ErrorCode: The error code, if access token is null then use this property to find the cause ErrorDescription: The text description of error code To refresh access token send a ProtoOARefreshTokenReq to OpenClient (API client) with your refresh token. Now you have an access token, you can use it to take the list of user authenticated trading accounts and then execute trading operations on those accounts or get accounts historical data, for that you have to use OpenClient.","title":"Authentication"},{"location":"authentication/#api-application","text":"To use Spotware Open API you have to first create an open API application, send an activation request to Spotware for your application, and once it got activated you can start using the API through your application. To create an Open API application go to: openapi.ctrader.com","title":"API Application"},{"location":"authentication/#getting-auth-code","text":"After Spotware activated your API application, you can start using it, the first step is to get an authentication code from user, to do that via OpenAPI.NET you can use the code below to get authentication URL: First add these usings: using OpenAPI.Net ; using OpenAPI.Net.Auth ; using OpenAPI.Net.Helpers ; Then: // The classes used in this code snippet are located at OpenAPI.Net.Auth // Your API application ID var appId = \"\" ; // Your API application secret var appSecret = \"\" ; // One of your API applications redirect URI that you want to redirect user var redirectUrl = \"\" ; _app = new App ( appId , appSecret , redirectUrl ); // The scope of authentication token (Trading or Accounts), Trading is default var authUri = _app . GetAuthUri ( scope : Scope . Trading ); // authUri is the authentication URI, open it on browser System . Diagnostics . Process . Start ( \"explorer.exe\" , $\"\\\"{authUri}\\\"\" ); When user opens the authentication URI on browser he has to enter his cTrader ID credentials and then select the trading accounts he want to authorize your API application to use, after that he will be redirected to your provided Redirect URL and the authentication code will be appended to the redirect URL as a parameter: http://api.algodeveloper.com/redirects/?code=20df253b58df60a4e09f10b45e2ec11dbc0ccc565326d5706a8ea As you can see \" http://api.algodeveloper.com/redirects/ \" is my redirect URI and \"20df253b58df60a4e09f10b45e2ec11dbc0ccc565326d5706a8ea\" is the authentication code. To extract the authentication code from redirect URL you can use the AuthCode class.","title":"Getting Auth Code"},{"location":"authentication/#generating-access-token","text":"After you got the user authentication code, you can generate an access token, you have to do it instantly otherwise authentication code will expire after one minute. To generate an access token via OpenAPI.NET use the following code: // The classes used in this code snippet are located at OpenAPI.Net.Auth // Use TokenFactory to get the token var token = await TokenFactory . GetToken ( authCode , app ); Now you have a token object, it has these properties: AccessToken: This is the access token, you will use it on your API calls RefreshToken: This is the token that you will use to refresh your access token after it expired, refresh token never expires ExpiresIn: The expiry time of your access token TokenType: Type of access token ErrorCode: The error code, if access token is null then use this property to find the cause ErrorDescription: The text description of error code To refresh access token send a ProtoOARefreshTokenReq to OpenClient (API client) with your refresh token. Now you have an access token, you can use it to take the list of user authenticated trading accounts and then execute trading operations on those accounts or get accounts historical data, for that you have to use OpenClient.","title":"Generating Access Token"},{"location":"calculating-symbol-tick-value/","text":"Calculating Symbol Tick/Pip Value \u00b6 When it comes to using Open API for trading or developing trading applications the most difficult part is calculating the symbols tick value, without a symbol tick value you can't calculate account equity, used margin, or size your position based on your account balance/equity. OpenAPI.NET makes symbol tick/Pip value calculation as simple as possible by providing a set of helper methods that you can use to calculate not just tick/Pip value also other properties of symbols like tick/Pip size. We also have a WPF Sample application that has all the necessary code for calculating symbols tick/Pip value and other account statistics like equity, free margin, used margin, margin level, net profit, and gross profit. To calculate a symbol tick value: Get all account assets by sending a ProtoOAAssetListReq request, store the assets inside a collection. You have to get all available symbols of a trading account by sending a ProtoOASymbolsListReq, then get all those symbols full entities by sending a ProtoOASymbolByIdReq, add all symbol IDs to the request SymbolId collection, store all symbol entities inside a collection. Subscribe to ProtoOASpotEvent of your API client: client . OfType < ProtoOASpotEvent >(). Subscribe ( OnSpotEvent ); OnSpotEvent will be the callback method that will be called whenever a symbol bid/ask changes, this method must have a ProtoOASpotEvent parameter. Subscribe to all symbols live quotes by sending a ProtoOASubscribeSpotsReq, add all symbols IDs to the request SymbolId collection. Now whenever a symbol bid/ask changes you will receive a ProtoOASpotEvent and your OnSpotEvent method will be called. Inside your OnSpotEvent you have to find the upcoming tick data symbol entity, the ProtoOASpotEvent has a SymbolId property that you can use. After you found the symbol entity that the ProtoOASpotEvent belongs to, you have to calculate its Bid/Ask: using OpenAPI.Net.Helpers ; // spotEvent is ProtoOASpotEvent if ( spotEvent . HasBid ) bid = symbol . GetPriceFromRelative (( long ) spotEvent . Bid ); if ( spotEvent . HasAsk ) ask = symbol . GetPriceFromRelative (( long ) spotEvent . Ask ); The GetPriceFromRelative method is part of SymbolExtensions class, its an extension method of ProtoOASymbol, to access it you have to add the \"OpenAPI.Net.Helpers\" using. Now we have the symbol latest bid/ask price, to calculate the tick value: using OpenAPI.Net.Helpers ; double symbolTickValue = 0 ; if ( symbolQuoteAsset . AssetId == accountDepositAsset . AssetId ) { symbolTickValue = symbol . GetTickValue ( symbolQuoteAsset , accountDepositAsset , null , default ); } else { var conversionSymbol = Symbols . FirstOrDefault ( iSymbol => ( iSymbol . BaseAssetId == symbolQuoteAsset . AssetId || iSymbol . QuoteAssetId == symbolQuoteAsset . AssetId ) && ( iSymbol . BaseAssetId == accountDepositAsset . AssetId || iSymbol . QuoteAssetId == accountDepositAsset . AssetId )); if ( conversionSymbol is not null && conversionSymbol . Bid is not 0 ) { var conversionSymbolBaseAsset = accountAssets . First ( iAsset => iAsset . AssetId == conversionSymbol . BaseAssetId ); symbolTickValue = symbol . GetTickValue ( symbolQuoteAsset , accountDepositAsset , conversionSymbolBaseAsset , conversionSymbol . Bid ); } } When a symbol quote asset/currency is same as your trading account deposit currency then its tick value is equal to the symbol tick size, that's why in above code snippet we check if its equal then we don't look for conversion symbol and we pass null and default (0) for conversion symbol base asset/currency and its current price. If its not then we have to convert the symbol price to account deposit currency, to do that we first iterate over all symbol entities, we need a symbol that its quote asset be same as symbol quote asset and its base or quote asset be same as account deposit asset/currency. Once we found the conversion symbol we then get its base asset from account assets collection and then we pass all data to the symbol GetTickValue extension method, this method is also part of SymbolExtensions class which is in \"OpenAPI.Net.Helpers\" name space. For a complete example please check our WPF Sample application . Also check our Blazor web assembly sample which is deployed in Github pages .","title":"Calculating Symbol Tick/Pip Value"},{"location":"calculating-symbol-tick-value/#calculating-symbol-tickpip-value","text":"When it comes to using Open API for trading or developing trading applications the most difficult part is calculating the symbols tick value, without a symbol tick value you can't calculate account equity, used margin, or size your position based on your account balance/equity. OpenAPI.NET makes symbol tick/Pip value calculation as simple as possible by providing a set of helper methods that you can use to calculate not just tick/Pip value also other properties of symbols like tick/Pip size. We also have a WPF Sample application that has all the necessary code for calculating symbols tick/Pip value and other account statistics like equity, free margin, used margin, margin level, net profit, and gross profit. To calculate a symbol tick value: Get all account assets by sending a ProtoOAAssetListReq request, store the assets inside a collection. You have to get all available symbols of a trading account by sending a ProtoOASymbolsListReq, then get all those symbols full entities by sending a ProtoOASymbolByIdReq, add all symbol IDs to the request SymbolId collection, store all symbol entities inside a collection. Subscribe to ProtoOASpotEvent of your API client: client . OfType < ProtoOASpotEvent >(). Subscribe ( OnSpotEvent ); OnSpotEvent will be the callback method that will be called whenever a symbol bid/ask changes, this method must have a ProtoOASpotEvent parameter. Subscribe to all symbols live quotes by sending a ProtoOASubscribeSpotsReq, add all symbols IDs to the request SymbolId collection. Now whenever a symbol bid/ask changes you will receive a ProtoOASpotEvent and your OnSpotEvent method will be called. Inside your OnSpotEvent you have to find the upcoming tick data symbol entity, the ProtoOASpotEvent has a SymbolId property that you can use. After you found the symbol entity that the ProtoOASpotEvent belongs to, you have to calculate its Bid/Ask: using OpenAPI.Net.Helpers ; // spotEvent is ProtoOASpotEvent if ( spotEvent . HasBid ) bid = symbol . GetPriceFromRelative (( long ) spotEvent . Bid ); if ( spotEvent . HasAsk ) ask = symbol . GetPriceFromRelative (( long ) spotEvent . Ask ); The GetPriceFromRelative method is part of SymbolExtensions class, its an extension method of ProtoOASymbol, to access it you have to add the \"OpenAPI.Net.Helpers\" using. Now we have the symbol latest bid/ask price, to calculate the tick value: using OpenAPI.Net.Helpers ; double symbolTickValue = 0 ; if ( symbolQuoteAsset . AssetId == accountDepositAsset . AssetId ) { symbolTickValue = symbol . GetTickValue ( symbolQuoteAsset , accountDepositAsset , null , default ); } else { var conversionSymbol = Symbols . FirstOrDefault ( iSymbol => ( iSymbol . BaseAssetId == symbolQuoteAsset . AssetId || iSymbol . QuoteAssetId == symbolQuoteAsset . AssetId ) && ( iSymbol . BaseAssetId == accountDepositAsset . AssetId || iSymbol . QuoteAssetId == accountDepositAsset . AssetId )); if ( conversionSymbol is not null && conversionSymbol . Bid is not 0 ) { var conversionSymbolBaseAsset = accountAssets . First ( iAsset => iAsset . AssetId == conversionSymbol . BaseAssetId ); symbolTickValue = symbol . GetTickValue ( symbolQuoteAsset , accountDepositAsset , conversionSymbolBaseAsset , conversionSymbol . Bid ); } } When a symbol quote asset/currency is same as your trading account deposit currency then its tick value is equal to the symbol tick size, that's why in above code snippet we check if its equal then we don't look for conversion symbol and we pass null and default (0) for conversion symbol base asset/currency and its current price. If its not then we have to convert the symbol price to account deposit currency, to do that we first iterate over all symbol entities, we need a symbol that its quote asset be same as symbol quote asset and its base or quote asset be same as account deposit asset/currency. Once we found the conversion symbol we then get its base asset from account assets collection and then we pass all data to the symbol GetTickValue extension method, this method is also part of SymbolExtensions class which is in \"OpenAPI.Net.Helpers\" name space. For a complete example please check our WPF Sample application . Also check our Blazor web assembly sample which is deployed in Github pages .","title":"Calculating Symbol Tick/Pip Value"},{"location":"compiling-proto-files/","text":"Compiling Proto Files \u00b6 If you are using this library it comes with compiled proto files of Spotware Open API and we do our best to keep the files update, in case there was a new version of proto files available and we weren't updated the files in library you can clone the library and compile the new proto files, then replace the library proto files with your compiled ones, the message files are located at Protobuf project inside Messages directory. For compiling the proto files there is a guide available on Spotware Open API documentation but that is out dated and if you compile the files by following their instruction you will endup with Protobuf 2.0 which is old version and not supported anymore by Google, the new Protobuf 3 compiler can compile the old version files, Open API uses 2.0 but you can use the new version compiler and benifit from all the new features of version 3. If you use the old version compiled files then you can't use .NET Core, because the Google Protobuf 2 .NET library is only available for .NET framework. We recommend you to use our compiling instruction instead of Spotware documentation instruction, this instruction is for Windows and you can follow the Google standard instruction on Protobuf documentation if you are using Linux. Download the proto files from Spotware provided link/repo Download the Google Protobuf latest version from here Extract the Google Protobuf, there will be a \"bin\" folder, copy the \".proto\" files there Open \"CMD\", go to bin folder location, and type: protoc --csharp_out=. ./proto_file_name.proto Instead of \"proto_file_name.proto\" you have to provide each of the proto files names, you have to execute this command for each proto file. After executing the command there will be a \".cs\" file for the proto file, you can use those files instead of library default message files. Don't forget to update the library Google Protobuf Nuget package to the version that you used for compiling the proto files, otherwise you will see lots of errors and you will not be able to build the project.","title":"Compiling Proto Files"},{"location":"compiling-proto-files/#compiling-proto-files","text":"If you are using this library it comes with compiled proto files of Spotware Open API and we do our best to keep the files update, in case there was a new version of proto files available and we weren't updated the files in library you can clone the library and compile the new proto files, then replace the library proto files with your compiled ones, the message files are located at Protobuf project inside Messages directory. For compiling the proto files there is a guide available on Spotware Open API documentation but that is out dated and if you compile the files by following their instruction you will endup with Protobuf 2.0 which is old version and not supported anymore by Google, the new Protobuf 3 compiler can compile the old version files, Open API uses 2.0 but you can use the new version compiler and benifit from all the new features of version 3. If you use the old version compiled files then you can't use .NET Core, because the Google Protobuf 2 .NET library is only available for .NET framework. We recommend you to use our compiling instruction instead of Spotware documentation instruction, this instruction is for Windows and you can follow the Google standard instruction on Protobuf documentation if you are using Linux. Download the proto files from Spotware provided link/repo Download the Google Protobuf latest version from here Extract the Google Protobuf, there will be a \"bin\" folder, copy the \".proto\" files there Open \"CMD\", go to bin folder location, and type: protoc --csharp_out=. ./proto_file_name.proto Instead of \"proto_file_name.proto\" you have to provide each of the proto files names, you have to execute this command for each proto file. After executing the command there will be a \".cs\" file for the proto file, you can use those files instead of library default message files. Don't forget to update the library Google Protobuf Nuget package to the version that you used for compiling the proto files, otherwise you will see lots of errors and you will not be able to build the project.","title":"Compiling Proto Files"},{"location":"open-client/","text":"Creating/Connecting Client \u00b6 The open client is the object that you will use to send/receive messages to API. First add these usings: using OpenAPI.Net ; using OpenAPI.Net.Auth ; using OpenAPI.Net.Helpers ; using System.Reactive.Linq ; using System.Linq ; using Google.Protobuf ; Then: // Mode can be either live or demo // If you want to access and work with live // trading accounts then use live otherwise use demo var host = ApiInfo . GetHost ( mode ); // You can set the maximum number of requests clients should send per second by using maxRequestPerSecond parameter (default: 40) // If you want to use web socket instead of TCP socket pass true for useWebSocket parameter of constructor // web socket allows you to use the Open API on static server-less sites like Blazor WASM environment var client = new OpenClient ( host , ApiInfo . Port , TimeSpan . FromSeconds ( 10 )); The first parameter of OpenClient is host, this is the API host URL based on your selected mode, the second parameter is API host port, and the third one is a time span that will be used as interval for sending heartbeats to API server. Use 10 or 15 seconds for sending heartbeats. You don't have to send heartbeat to server manually, the client will send that and it will keep its connection alive After you created the client you have to call its Connect method: await client . Connect (); If connection fails it will throw a ConnectionException, check the inner exception to get the actual exception that was thrown. If you call a disposed client Connect method it will throw a ObjectDisposedException. Now client is connected to API server and you can send/receive messages. The OpenClient (IOpenClient) implements IDisposable, so you can use it on a C# \"using\" block like file streams. Once you finished your work with client don't forget to dispose it or if you just need it for sending/receiving few messages you can use it inside a using block: using ( var client = new OpenClient ( host , ApiInfo . Port , TimeSpan . FromSeconds ( 10 )) { await client . Connect (); // Send message or subscribe to responses here } Or you can: using var client = new OpenClient ( host , ApiInfo . Port , TimeSpan . FromSeconds ( 10 )); await client . Connect (); The OpenClient class has some useful public properties you can use to check the state of client. Sending Messages \u00b6 You can send all of the Open API supported messages easily via your OpenClient object, just create the message object and send it by calling client \"SendMessage\" method: // The first message you must send var applicationAuthReq = new ProtoOAApplicationAuthReq { ClientId = \"\" , ClientSecret = \"\" , }; await _client . SendMessage ( applicationAuthReq , ProtoOAPayloadType . ProtoOaApplicationAuthReq , \"This is client message ID and its optional\" ); You have to provide the message payload type, you can use \"ProtoOAPayloadType\" or \"ProtoPayloadType\" enumeration types to get the message payload type based on your message type. The last parameter of \"SendMessage\" method is client message ID, you don't have to pass it as the client message ID is optional, this message will be returned back on response. All open API messages have their own classes, just create an object of message class and send it. There are other SendMessage method overloads that you can use, all send message methods put your message on the messages queue channel. To send a message instantly you can use the SendMessageInstant method. Receiving Messages \u00b6 The OpenClient (IOpenClient) class implements the RX \"IObservable \" interface, the \"IMessage\" is the base class of all Google Protobuf messages, this allows you to easily subscribe to any message type you want to receive: // Here I'm filtering out the ProtoHeartbeatEvent and subscribing // to all other message types // The OnError will be called if something went wrong var disposable = client . Where ( iMessage => iMessage is not ProtoHeartbeatEvent ) . Subscribe ( OnMessageReceived , OnError ); A basic understanding of RX observable streams will help you a lot. After you subscribed to a message it will return back an IDisposable object, to unsubscribe you have to dispose the returned IDisposable object. To subscribe for an specific message type use Linq OfType extension method: // Here I'm subscribing to only ProtoOAErrorRes var disposable = client . OfType < ProtoOAErrorRes >(). Subscribe ( OnError ); You can use any of the Open API response or event messages to subscribe like above code snippet. If you want to receive a message with a client message ID (clientMsgId) then you have to subscribe to \"ProtoMessage\" and then use the MessageFactory class to get the actual message: var disposable = client . OfType < ProtoMessage >(). Subscribe ( OnProtoMessage ); private void OnProtoMessage ( ProtoMessage protoMessage ) { var clientMsgId = protoMessage . ClientMsgId ; // Message factory can return null var message = MessageFactory . GetMessage ( protoMessage ); } Client only stream a ProtoMessage if its ClientMsgId is set or it couldn't parse the actual message, otherwise it will not stream it. Handling Exceptions \u00b6 If something went wrong or client lost connection to API you can get the thrown exception by subscribing to client stream OnError: // Here I'm subscribing to only ProtoOAErrorRes var disposable = client . Subscribe ( _ => {}, OnError ); Now client will call and pass the exception to your OnError, also if your OnError method got triggered it means the client stream is terminated, based on RX guidelines you have to stop interacting with it, you don't have to dispose the client after it got terminated because the client will dispose itself on termination. If you try to dispose a terminated client nothing will happen. Client most probably will throw one of these exception types: ReceiveException: This exception type will be thrown if something went wrong while receiving data ObserverException: This exception will be thrown if something went wrong during an observer (subscriber) OnNext method call, you can get the observer object via its Observer property Check the above exceptions \"InnerException\" property to get the actual exception. During call to any of client \"SendMessage\" methods you can expect one of these exceptions: SendException: This exception will be thrown if something went wrong while sending data ObjectDisposedException: If you call send message of a disposed client then it will throw this exception Disposing Client \u00b6 As mentioned the client object implements IDisposable interface, so you must dispose it after finishing your work. To avoid calling dispose method several times you can check the client IsDisposed property and calling dispose method several times will not cause any issue. If a client got terminated by an exception and it called the OnError of observers then it will dispose itself and you don't have to call the dispose method inside your OnError handler. If the client is disposed without termination then it will call the observers OnCompleted handler. If you got a ConnectionException during the call on client Connect method then the client is already disposed, you don't have to call it's dispose method and you can't use that client instance anymore.","title":"Open Client"},{"location":"open-client/#creatingconnecting-client","text":"The open client is the object that you will use to send/receive messages to API. First add these usings: using OpenAPI.Net ; using OpenAPI.Net.Auth ; using OpenAPI.Net.Helpers ; using System.Reactive.Linq ; using System.Linq ; using Google.Protobuf ; Then: // Mode can be either live or demo // If you want to access and work with live // trading accounts then use live otherwise use demo var host = ApiInfo . GetHost ( mode ); // You can set the maximum number of requests clients should send per second by using maxRequestPerSecond parameter (default: 40) // If you want to use web socket instead of TCP socket pass true for useWebSocket parameter of constructor // web socket allows you to use the Open API on static server-less sites like Blazor WASM environment var client = new OpenClient ( host , ApiInfo . Port , TimeSpan . FromSeconds ( 10 )); The first parameter of OpenClient is host, this is the API host URL based on your selected mode, the second parameter is API host port, and the third one is a time span that will be used as interval for sending heartbeats to API server. Use 10 or 15 seconds for sending heartbeats. You don't have to send heartbeat to server manually, the client will send that and it will keep its connection alive After you created the client you have to call its Connect method: await client . Connect (); If connection fails it will throw a ConnectionException, check the inner exception to get the actual exception that was thrown. If you call a disposed client Connect method it will throw a ObjectDisposedException. Now client is connected to API server and you can send/receive messages. The OpenClient (IOpenClient) implements IDisposable, so you can use it on a C# \"using\" block like file streams. Once you finished your work with client don't forget to dispose it or if you just need it for sending/receiving few messages you can use it inside a using block: using ( var client = new OpenClient ( host , ApiInfo . Port , TimeSpan . FromSeconds ( 10 )) { await client . Connect (); // Send message or subscribe to responses here } Or you can: using var client = new OpenClient ( host , ApiInfo . Port , TimeSpan . FromSeconds ( 10 )); await client . Connect (); The OpenClient class has some useful public properties you can use to check the state of client.","title":"Creating/Connecting Client"},{"location":"open-client/#sending-messages","text":"You can send all of the Open API supported messages easily via your OpenClient object, just create the message object and send it by calling client \"SendMessage\" method: // The first message you must send var applicationAuthReq = new ProtoOAApplicationAuthReq { ClientId = \"\" , ClientSecret = \"\" , }; await _client . SendMessage ( applicationAuthReq , ProtoOAPayloadType . ProtoOaApplicationAuthReq , \"This is client message ID and its optional\" ); You have to provide the message payload type, you can use \"ProtoOAPayloadType\" or \"ProtoPayloadType\" enumeration types to get the message payload type based on your message type. The last parameter of \"SendMessage\" method is client message ID, you don't have to pass it as the client message ID is optional, this message will be returned back on response. All open API messages have their own classes, just create an object of message class and send it. There are other SendMessage method overloads that you can use, all send message methods put your message on the messages queue channel. To send a message instantly you can use the SendMessageInstant method.","title":"Sending Messages"},{"location":"open-client/#receiving-messages","text":"The OpenClient (IOpenClient) class implements the RX \"IObservable \" interface, the \"IMessage\" is the base class of all Google Protobuf messages, this allows you to easily subscribe to any message type you want to receive: // Here I'm filtering out the ProtoHeartbeatEvent and subscribing // to all other message types // The OnError will be called if something went wrong var disposable = client . Where ( iMessage => iMessage is not ProtoHeartbeatEvent ) . Subscribe ( OnMessageReceived , OnError ); A basic understanding of RX observable streams will help you a lot. After you subscribed to a message it will return back an IDisposable object, to unsubscribe you have to dispose the returned IDisposable object. To subscribe for an specific message type use Linq OfType extension method: // Here I'm subscribing to only ProtoOAErrorRes var disposable = client . OfType < ProtoOAErrorRes >(). Subscribe ( OnError ); You can use any of the Open API response or event messages to subscribe like above code snippet. If you want to receive a message with a client message ID (clientMsgId) then you have to subscribe to \"ProtoMessage\" and then use the MessageFactory class to get the actual message: var disposable = client . OfType < ProtoMessage >(). Subscribe ( OnProtoMessage ); private void OnProtoMessage ( ProtoMessage protoMessage ) { var clientMsgId = protoMessage . ClientMsgId ; // Message factory can return null var message = MessageFactory . GetMessage ( protoMessage ); } Client only stream a ProtoMessage if its ClientMsgId is set or it couldn't parse the actual message, otherwise it will not stream it.","title":"Receiving Messages"},{"location":"open-client/#handling-exceptions","text":"If something went wrong or client lost connection to API you can get the thrown exception by subscribing to client stream OnError: // Here I'm subscribing to only ProtoOAErrorRes var disposable = client . Subscribe ( _ => {}, OnError ); Now client will call and pass the exception to your OnError, also if your OnError method got triggered it means the client stream is terminated, based on RX guidelines you have to stop interacting with it, you don't have to dispose the client after it got terminated because the client will dispose itself on termination. If you try to dispose a terminated client nothing will happen. Client most probably will throw one of these exception types: ReceiveException: This exception type will be thrown if something went wrong while receiving data ObserverException: This exception will be thrown if something went wrong during an observer (subscriber) OnNext method call, you can get the observer object via its Observer property Check the above exceptions \"InnerException\" property to get the actual exception. During call to any of client \"SendMessage\" methods you can expect one of these exceptions: SendException: This exception will be thrown if something went wrong while sending data ObjectDisposedException: If you call send message of a disposed client then it will throw this exception","title":"Handling Exceptions"},{"location":"open-client/#disposing-client","text":"As mentioned the client object implements IDisposable interface, so you must dispose it after finishing your work. To avoid calling dispose method several times you can check the client IsDisposed property and calling dispose method several times will not cause any issue. If a client got terminated by an exception and it called the OnError of observers then it will dispose itself and you don't have to call the dispose method inside your OnError handler. If the client is disposed without termination then it will call the observers OnCompleted handler. If you got a ConnectionException during the call on client Connect method then the client is already disposed, you don't have to call it's dispose method and you can't use that client instance anymore.","title":"Disposing Client"}]}